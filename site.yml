---
# Let's do some stuff we know we need to do for each and every machine
# but we do not want to do this for the Synology!
- name: Talk to all hosts and learn about them
  hosts: all,!synology
  tasks:
    - name: Classify Linux hosts depending on their distribution
      group_by:
        key: family_{{ ansible_facts['os_family'] }}
      tags:
        - setup
        - update
        - hardening
        - profile
        - inxi
          # Tags: setup     ## Only tasks that should run on a new machine in order to set it up properly
          # Tags: update    ## Only tasks that should be run when we try to update the packages on the machines
          # Tags: hardening ## Only tasks that should be run when hardening the sytem. Seperate section.
          # Tags: profile   ## Simple task to update the user profile on the servers after install
          # Tags: inxi      ## Simple task to update inxi binary. Does not need to be part of regular update

    - name: Check if the server has been setup completely
      # Do a check for file "/setup_complete" to see if the server has been setup already
      stat:
        path: "/setup_complete"
      register: check
      tags: setup
      
# Do some OS specific work now.

# Let's start with the RedHat based linux distributions
# Fedora, CentOS, RHEL, AlmaLinux
- hosts: family_RedHat
  become: yes
  gather_facts: False
  tasks:
    - name: Install epel repository on RedHat Enterprise Linux or Fedora
      when: not check.stat.exists and (ansible_distribution == "RedHat" or ansible_distribution == "Fedora")
      dnf:
        name:
          - https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm
      tags: setup
    - name: Install epel repository on CentOS and now AlmaLinux
      when: (ansible_distribution == "CentOS" or ansible_distribution == "AlmaLinux") and not check.stat.exists
      dnf:
        name:
          - epel-release
        update_cache: yes
        state: latest
      tags: setup
    - name: Install the RedHat specific packages
      when: not check.stat.exists
      dnf:
        pkg: "{{ packages_rhel }}"
        update_cache: yes
        state: latest
      tags: setup
    - name: Let's make sure all packages are up to date on RedHat based Linux OS
      dnf:
        name: "*"
        state: latest
      tags: update
    - name: Remove dependancies that are no longer needed
      dnf:
        autoremove: yes
      tags: update

# We also have a bunch of Debian based Linux distributions
# Debian, Ubuntu
- hosts: family_Debian
  become: yes
  gather_facts: False
  tasks:
    - name: Install the Debian specific packages
      when: not check.stat.exists
      apt:
        pkg: "{{ packages_deb }}"
        update_cache: yes
        state: latest
      tags: setup
    - name: Let's make sure all packages are up to date on Debian based Linux OS
      apt:
        name: "*"
        cache_valid_time: 3600
        state: latest
      tags: update
    - name: Clean cache
      apt:
        autoclean: yes
      tags: update
    - name: Remove dependancies that are no longer needed
      apt:
        autoremove: yes
      tags: update

# Generic stuff

# Let's create a section where stuff goes that needs to be done on all hosts.
# This section also includes activities for hardening.
- hosts: all,!synology
  gather_facts: False
  become: yes
  handlers:
  - name: restart_ssh
    # Handler so we can restart the SSHD server if we changed the config
    service:
      name: sshd
      state: restarted
  tasks:
  - name: Disable password authentication for SSH
    # Check if PasswordAuthentication is enabled, and if so, disable it.
    ansible.builtin.lineinfile:
      path: /etc/ssh/sshd_config
      regexp: '^PasswordAuthentication(.*)$'
      line: PasswordAuthentication no
    tags:
      - hardening
    notify:
      - restart_ssh
  - name: Disable root login for SSH
    # Check if root login is enabled for SSH, and if so, disable it.
    ansible.builtin.lineinfile:
      path: /etc/ssh/sshd_config
      regexp: '^PermitRootLogin(.*)$'
      line: PermitRootLogin no
    tags:
      - hardening
    notify:
      - restart_ssh
  - name: Install the sport-touring.eu base packages
    # Install the base packages we want on every system
    when: not check.stat.exists
    ansible.builtin.package:
      name: "{{ packages }}"
      state: present
    tags: setup
  - name: Set /setup_complete to avoid running these again
    # Set the file "/setup_complete" so we do not try to install everything again
    when: not check.stat.exists
    file:
      path: "/setup_complete"
      state: touch
    tags: setup
  - name: Make sure /etc/inxi.conf is not present on the system, so we can update manually and override the package manager versions
    file:
      state: absent
      path: /etc/inxi.conf
    tags: update
  - name: Force manual update on inxi to the latest version
    command: /usr/bin/inxi -U
    tags: inxi
  - name: Now we need to set up the user profile, because we want to be able to login and we need the SSH keys
    unarchive:
      src: /home/throttlemeister/profile_proper.tar.gz
      dest: /home/throttlemeister
    tags:
      - profile
  - name: Upload and extract profile for root
    unarchive:
      src: /home/throttlemeister/profile_proper.tar.gz
      dest: /root
      owner: root
      group: root
    tags:
      - profile


# A special case is Synology. It is Linux based, but not based on a generic distribution
- hosts: synology
  become: yes
  tasks:
  - name: Update bootstrap packages on Synology NAS
    command: "/opt/bin/opkg update && /opt/bin/opkg upgrade"
    tags: update
